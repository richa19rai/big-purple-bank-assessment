// <auto-generated />
using BankingApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankingApi.Migrations
{
    [DbContext(typeof(BankingContext))]
    [Migration("20250505161940_BankDB")]
    partial class BankDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankAPI.Models.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AvailableBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpeningDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = "12345",
                            AccountStatus = "ACTIVE",
                            AccountType = "SAVINGS",
                            AvailableBalance = 5000.00m,
                            Currency = "AUD",
                            DisplayName = "Primary Savings",
                            OpeningDate = "2023-01-01"
                        },
                        new
                        {
                            AccountId = "67890",
                            AccountStatus = "ACTIVE",
                            AccountType = "CHECKING",
                            AvailableBalance = 1500.00m,
                            Currency = "AUD",
                            DisplayName = "Checking Account",
                            OpeningDate = "2023-02-01"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
